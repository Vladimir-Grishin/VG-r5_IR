
 
import numpy as np
import tensorflow as tf
from tensorflow.keras.layers import Dense, Input, Conv2D, MaxPooling2D, Flatten
from tensorflow import keras
from keras import layers, models
from tensorflow.keras.datasets import cifar10
import matplotlib.pyplot as plt

tf.random.set_seed(1)
print('>>>===============================>>>')

input = keras.Input(shape=(32, 32, 3))
x = layers.Conv2D(32, 3, activation='relu')(input)
x = layers.MaxPooling2D(2, padding='same')(x)
x = layers.Conv2D(64, 3, activation='relu')(x)
x = layers.MaxPooling2D(2, padding='same')(x)
x = layers.Flatten()(x)
x = layers.Dense(256, activation='relu')(x)
x = layers.Dropout(0.5)(x)
output = layers.Dense(10, activation='softmax')(x)
model = keras.Model(inputs=input, outputs=output)

model.summary()
# загрузка тестовых данных cifar-10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
 
x_train = x_train / 255
x_test = x_test / 255
 
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

#компилируем модель с параметрами обучения
optr = 'adam' #'Adamax'+   #'Adagrad'+  #'Adadelta'+ #'adam'+ #'RMSprop'+ #'SGD'#
print('optimizer= ',optr)
model.compile(optimizer=optr,
             loss='categorical_crossentropy',
             metrics=['accuracy'])

#обучаем НС ===================================================>>>
print('====================>>> обучаем модель')
history = model.fit(x_train, y_train, batch_size=64, epochs=20, validation_split=0.2)

print('====================>>> оценка качества работы НС на тестовой выборке')
print(model.evaluate(x_test, y_test) )
print('====================>>> predictions')
image_index = 3
image = x_test[image_index]
image = np.expand_dims(image, axis=0)
predictions = model.predict(image)
predicted_class = np.argmax(predictions)
trust_class = np.argmax(y_test[image_index])

print("Предсказанный класс: ", predicted_class)
print("Настоящий класс: ", trust_class)
#график функции потерь
print('===============>>> график ')
plt.figure('loss'); plt.plot(history.history['loss'],'r'); plt.grid(True)
plt.figure('accuracy'); plt.plot(history.history['accuracy'],'g'); plt.grid(True)
plt.show()

#обучаем 2 НС ===================================================>>>
if 2==1:
    print('====================>>> обучаем 2 модель')
    history = model.fit(x_train, y_train, batch_size=64, epochs=5, validation_split=0.2)

    print('====================>>> оценка качества работы НС на тестовой выборке')
    print(model.evaluate(x_test, y_test) )
    print('====================>>> predictions')
    image = x_test[image_index]
    image = np.expand_dims(image, axis=0)
    predictions = model.predict(image)
    predicted_class = np.argmax(predictions)
    trust_class = np.argmax(y_test[image_index])

    print("Предсказанный класс: ", predicted_class)
    print("Настоящий класс: ", trust_class)
    #график функции потерь
    print('===============>>> график ')
    plt.figure('loss'); plt.plot(history.history['loss'],'r'); plt.grid(True)
    plt.figure('accuracy'); plt.plot(history.history['accuracy'],'g'); plt.grid(True)
    plt.show()
print('<<<===============================<<<')


